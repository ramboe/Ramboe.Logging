@using Blazored.LocalStorage
@inherits LayoutComponentBase

<MudThemeProvider Theme="MyTheme" IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AuthorizeView>
        <Authorized>

            <MudAppBar Elevation="0">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                RamboeLogging
                <MudSpacer />

                @if (Loading)
                {
                    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.DoorBack" Color="Color.Inherit" Edge="Edge.Start" OnClick="Logout" />
                }

            </MudAppBar>
            @* <MudDrawer @bind-Open="@_drawerOpen"> *@
            <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="0">
                <NavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    <MudMainContent Class="my-4 px-4">
        <AuthorizeView>
            <Authorized>
                @Body
            </Authorized>
            <NotAuthorized>
                <LoginForm />
            </NotAuthorized>
        </AuthorizeView>
    </MudMainContent>
</MudLayout>

@code {

    [Inject]
    public ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    bool _drawerOpen = true;

    public bool Loading { get; set; }

    public MudTheme MyTheme { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var primary = Colors.Purple.Darken3;
        var secondary = Colors.Purple.Darken4;

    // var primaryDark = Colors.Grey.Lighten1;
        var primaryDark = Colors.DeepPurple.Accent1;
        var secondaryDark = Colors.DeepPurple.Lighten1;

        MyTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = primary,
                Secondary = secondary,
                AppbarBackground = primary,
            },
            Typography = new Typography
            {
                Default = new Default
                {
                    FontFamily = new[]
                    {
    // "Poppins", "Helvetica", "Arial", "sans-serif"
    // "Exo 2", "Helvetica", "Arial", "sans-serif"
    // "Segoe UI", "Helvetica", "Arial", "sans-serif"
                        "Inconsolata", "Monospace"
                    }
                },
            },
            PaletteDark = new PaletteDark()
            {
    // Primary = Colors.Blue.Lighten1
                Primary = primaryDark,
                Secondary = secondaryDark,
            },
            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "260px",
                DrawerWidthRight = "300px",
                DefaultBorderRadius = "0px",
            }
        };
    }

    async Task Logout()
    {
        Loading = true;

        await LocalStorageService.RemoveItemAsync(Constants.STORAGE_TOKENKEY);

        await Task.Delay(500);

        Loading = false;

        NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

}